<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./style/base.css">
    <link rel="stylesheet" href="./style/grid.css">
    <link rel="stylesheet" href="./style/main.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/d72dd2144a.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/style/responsive.css">
    <link rel="stylesheet" href="/style/chatSupport.css">
    <title>ChatSupport-TS-SHOP</title>
    <script>
        const list_item = JSON.parse('<%- JSON.stringify(items) %>');
        const myCart = JSON.parse('<%- JSON.stringify(myCart) %>');
        const chatList = JSON.parse('<%- JSON.stringify(chatList) %>');
        const user = JSON.parse('<%- JSON.stringify(user) %>');
        console.log(chatList)
    </script>
</head>
<body>
    <!-- Header start1-->
    <%- include('./includes/header-only.ejs') %>
    <!-- Header end -->
    <div class="container">
        <%if(user.user_role === 'admin') { %>
            <div class="chatList--box">
            <%if(chatList.length === 0){ %>
                <p>No message</p>
                <%}else{%>
                <%chatList.forEach(chat =>{%>
                    <div class="chatList--item" data-room-id="<%= chat.room_id %>">
                        <img class="chatList--item__userImg" src="/image/user-image/<%=users.find(user=>user.user_id === chat.sender_id).user_img %>"></img>
                        <div class="chatList--item__userName"><%=chat.sender_name %></div>
                        <div class="chatList--item__date"><%=chat.timestamp %></div>
                        <div class="chatList--item__length"><%=chat.megSum %></div>
                        <div class="enter-room-btn" onclick="roomChatJoin('<%=chat.room_id %>','<%=chat.sender_name %>')">
                            <i class="fa-solid fa-right-to-bracket"></i>
                        </div>
                        <a href="/chatbox-roomDelete/<%=chat.room_id %>" class="message-delete-btn" style="font-size: 2rem; cursor: pointer;padding: 10px;">
                            <i class="fa-solid fa-delete-left"></i>
                        </a>
                    </div>
                <%})%>
                <% } %>
            </div>
        <%}%>
            <div class="chatapp--box" <%= user.user_role === 'admin' ? 'style=display:none;' : '' %>>
                <div class="chatapp--box__title">
                    Chat Support
                    <div class="support-manager">
                        <%=user.user_role === 'admin'? 'ユーザ：' :'担当者 (offline)'%><span></span>
                    </div>
                </div>
                <div class="chatapp--box__content">
                    <%if(user.user_role === 'customer'){%>
                        <div class="messageFrom-item">
                            <div class="message-fromUser-img"><img src="/image/user-image/default.jpg" alt=""><div class="user-status off"></div></div>
                            <div class="message-fromUser-content">ようこそ、私はサポート担当者です。何かお手伝い出来ることはありますか。</div>
                        </div>
                    <%}%>
                </div>
                <div class="chatapp--box__btn">
                    <input type="hidden" name="roomId">
                    <input type="text" id="m" placeholder="ここにメッセージを入力してください">
                    <button onclick="sendMessage()">送信</button>
                </div>
            </div>
    </div>
<!-- Footer Start -->
<%- include('./includes/footer.ejs') %>
<!-- Footer End -->
    <!-- Ensure this script is loaded before your own script -->
<script src="/script/script.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io(); // Kết nối tới server

async function roomChatJoin(roomId, senderName) {
    const chatBox = document.querySelector('.chatapp--box');
    const chatListBox = document.querySelector('.chatList--box');
    const supportManager = document.querySelector('.support-manager span');
    const roomIdInput = document.querySelector('input[name="roomId"]');

    chatBox.style.display = 'block';
    chatListBox.style.display = 'none';
    supportManager.textContent = senderName;
    roomIdInput.value = roomId;

    const userData = {
        userName: user.user_name,
        userImg: user.user_img,
        userId: user.user_id,
        userRole: user.user_role,
        roomId: roomId
    };

    socket.emit('adminJoinRoom', userData);
    socket.emit('adminOn', userData);

    socket.on('chat message', (data) => {
        if (data.roomId === roomId) {
            renderMessage(data, data.senderId === user.user_id, true);
        }
    });

    socket.on('loadChatHistory', (chatHistory) => {
        chatHistory.filter(msg => msg.room_id === roomId).forEach((messageData) => {
            const isFromCurrentUser = messageData.sender_id === user.user_id;
            renderMessage(messageData, isFromCurrentUser, true);
        });
        scrollToBottom();
    });

    socket.on('userOn', (userData) => {
        if (userData.roomId === roomId) {
            updateUserStatus(userData.userName, true);
        }
    });
}

if (user.user_role === 'customer') {
    const roomId = `room-${user.user_id}`;
    document.querySelector('input[name="roomId"]').value = roomId;

    const userData = {
        userName: user.user_name,
        userImg: user.user_img,
        userId: user.user_id,
        userRole: user.user_role,
        roomId: roomId
    };

    socket.emit('joinRoom', userData);

    socket.on('chat message', (data) => {
        if (data.roomId === roomId) {
            renderMessage(data, data.senderId === user.user_id, true);
        }
    });

    socket.on('adminOn', (adminData) => {
        if (adminData.roomId === roomId) {
            updateAdminStatus(adminData.userName, true);
        }
    });

    socket.on('adminOff', () => {
        updateAdminStatus('担当者', false);
    });

    socket.on('userOn', (userData) => {
        if (userData.roomId === roomId) {
            updateUserStatus(userData.userName, true);
        }
    });
}

function renderMessage(data, isFromCurrentUser, adminOnline = false) {
    const chatBox = document.querySelector('.chatapp--box__content');
    const messItem = document.createElement('div');
    messItem.classList.add(isFromCurrentUser ? 'messageTo-item' : 'messageFrom-item');
    
    messItem.innerHTML = `
        <div class="${isFromCurrentUser ? 'message-ToUser-img' : 'message-fromUser-img'}">
            <img src="/image/user-image/${isFromCurrentUser ? user.user_img : 'default.jpg'}" alt="User Image">
            <div class="message-userName">${data.sender_name}</div>
            ${!isFromCurrentUser ? `<div class="user-status ${adminOnline ? 'on' : 'off'}"></div>` : ''}
        </div>
        <div class="${isFromCurrentUser ? 'message-ToUser-content' : 'message-fromUser-content'}">
            <p>${data.message}</p>
        </div>
        <span class="timestamp">${new Date(data.timestamp).toLocaleString()}</span>
    `;
    
    // Append only if it's not already rendered
    if (!chatBox.querySelector(`[data-message-id="${data.timestamp}"]`)) {
        messItem.setAttribute('data-message-id', data.timestamp);
        chatBox.appendChild(messItem);
        scrollToBottom();
    }
}

function updateAdminStatus(adminName, isOnline) {
    const supportManager = document.querySelector('.support-manager');
    supportManager.innerHTML = `担当者：${adminName} (${isOnline ? 'online' : 'offline'})`;

    const userStatus = document.querySelectorAll('.user-status');
    userStatus.forEach((status) => {
        status.classList.toggle('on', isOnline);
        status.classList.toggle('off', !isOnline);
    });
}

function updateUserStatus(userName, isOnline) {
    const messages = document.querySelectorAll('.messageFrom-item');
    messages.forEach((message) => {
        const userNameElement = message.querySelector('.message-userName');
        if (userNameElement && userNameElement.textContent === userName) {
            const status = message.querySelector('.user-status');
            if (status) {
                status.classList.toggle('on', isOnline);
                status.classList.toggle('off', !isOnline);
            }
        }
    });
}

function sendMessage() {
    const input = document.getElementById('m');
    const msg = input.value.trim();

    if (msg) {
        const sanitizedMessage = msg.replace(/</g, "&lt;").replace(/>/g, "&gt;");  // Simple sanitization
        const messageData = {
            sender_name: user.user_name,
            senderId: user.user_id,
            senderRole: user.user_role,
            message: sanitizedMessage,
            timestamp: new Date().toISOString(),
            roomId: document.querySelector('input[name="roomId"]').value
        };

        socket.emit('chat message', messageData);  // Emit the message to the server
        input.value = '';  // Clear the input field after sending
    } else {
        alert('メッセージを入力してください！');  // Show alert if the message is empty
    }
}

// Add an event listener to the input field for the Enter key
document.getElementById('m').addEventListener('keydown', function(event) {
    // Check if the Enter key (keyCode 13) is pressed
    if (event.key === 'Enter') {
        event.preventDefault(); // Prevent the default action (e.g., form submission)
        sendMessage(); // Call the sendMessage function to send the message
    }
});

function scrollToBottom() {
    const chatBox = document.querySelector('.chatapp--box__content');
    chatBox.scrollTop = chatBox.scrollHeight;
}
</script>

</body>
</html>
